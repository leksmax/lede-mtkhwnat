From cbe86d50805fd01379e76a38edcb7dfaba093f38 Mon Sep 17 00:00:00 2001
From: tina_chen <ting-yun_chen@alphanetworks.com>
Date: Tue, 26 Mar 2019 16:49:36 +0800
Subject: [PATCH 3/5] feat: [IPv6 CERouter] patch from Eric WDL

Dates: 2019/03/22 15:07

- patch for WAN RFC4862, RFC1981 and RFC7084
- Not include WAN RFC1981 case 10,11

alphawrt : basic/alphawrt-mtk-4010
alphawrt/alpha/kernels/linux-4.4.124 : kernels/linux-4.4.124-mtk-4010.git
alphawrt/alpha/pkg.gpl/common : pkg.gpl/common

Change-Id: Ie25885b0bc105b2a1b720f511fe1e02fc54861db
---
 net/ipv6/addrconf.c | 155 +++++++++++++++++++++++++++++++++++++++++++---------
 net/ipv6/icmp.c     |  14 +++--
 net/ipv6/ndisc.c    |   9 ++-
 3 files changed, 144 insertions(+), 34 deletions(-)

diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index e73b3eb..5e036a4 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -185,7 +185,7 @@ static struct rt6_info *addrconf_get_prefix_route(const struct in6_addr *pfx,
 static void addrconf_dad_start(struct inet6_ifaddr *ifp);
 static void addrconf_dad_work(struct work_struct *w);
 static void addrconf_dad_completed(struct inet6_ifaddr *ifp);
-static void addrconf_dad_run(struct inet6_dev *idev);
+static void addrconf_dad_run(struct inet6_dev *idev, bool restart);
 static void addrconf_rs_timer(unsigned long data);
 static void __ipv6_ifa_notify(int event, struct inet6_ifaddr *ifa);
 static void ipv6_ifa_notify(int event, struct inet6_ifaddr *ifa);
@@ -290,9 +290,12 @@ static struct ipv6_devconf ipv6_devconf_dflt __read_mostly = {
 };
 
 /* Check if a valid qdisc is available */
-static inline bool addrconf_qdisc_ok(const struct net_device *dev)
+
+// mark@wdl, copy from linux-4.9.162 for CE LOGO test wan_rfc4862.
+// some race condition casue only check qdisc_tx_is_noop() isn't correct.
+static inline bool addrconf_link_ready(const struct net_device *dev)
 {
-	return !qdisc_tx_is_noop(dev);
+	return netif_oper_up(dev) && !qdisc_tx_is_noop(dev);
 }
 
 static void addrconf_del_rs_timer(struct inet6_dev *idev)
@@ -442,7 +445,7 @@ static struct inet6_dev *ipv6_add_dev(struct net_device *dev)
 
 	ndev->token = in6addr_any;
 
-	if (netif_running(dev) && addrconf_qdisc_ok(dev))
+	if (netif_running(dev) && addrconf_link_ready(dev))
 		ndev->if_flags |= IF_READY;
 
 	ipv6_mc_init_dev(ndev);
@@ -1853,7 +1856,7 @@ void addrconf_dad_failure(struct inet6_ifaddr *ifp)
 	}
 
 	net_info_ratelimited("%s: IPv6 duplicate address %pI6c detected!\n",
-			     ifp->idev->dev->name, &ifp->addr);
+                            ifp->idev->dev->name, &ifp->addr);
 
 	spin_lock_bh(&ifp->lock);
 
@@ -3190,6 +3193,69 @@ static void addrconf_gre_config(struct net_device *dev)
 }
 #endif
 
+// mark@wdl, copy from linux-4.20.15 for CE LOGO test wan_rfc4862.
+static int fixup_permanent_addr(struct inet6_dev *idev,
+				struct inet6_ifaddr *ifp)
+{
+	/* rt6i_ref == 0 means the host route was removed from the
+	 * FIB, for example, if 'lo' device is taken down. In that
+	 * case regenerate the host route.
+	 */
+	if (!ifp->rt || !atomic_read(&ifp->rt->rt6i_ref)) {
+		struct rt6_info *rt, *prev;
+
+		rt = addrconf_dst_alloc(idev, &ifp->addr, false);
+		if (unlikely(IS_ERR(rt)))
+			return PTR_ERR(rt);
+
+		/* ifp->rt can be accessed outside of rtnl */
+		spin_lock(&ifp->lock);
+		prev = ifp->rt;
+		ifp->rt = rt;
+		spin_unlock(&ifp->lock);
+
+		ip6_rt_put(prev);
+	}
+
+	if (!(ifp->flags & IFA_F_NOPREFIXROUTE)) {
+		addrconf_prefix_route(&ifp->addr, ifp->prefix_len,
+				      idev->dev, 0, 0);
+	}
+
+	if (ifp->state == INET6_IFADDR_STATE_PREDAD)
+		addrconf_dad_start(ifp);
+
+	return 0;
+}
+
+static void addrconf_permanent_addr(struct net_device *dev)
+{
+	struct inet6_ifaddr *ifp, *tmp;
+	struct inet6_dev *idev;
+
+	idev = __in6_dev_get(dev);
+	if (!idev)
+		return;
+
+	write_lock_bh(&idev->lock);
+
+	list_for_each_entry_safe(ifp, tmp, &idev->addr_list, if_list) {
+		if ((ifp->flags & IFA_F_PERMANENT) &&
+		    fixup_permanent_addr(idev, ifp) < 0) {
+			write_unlock_bh(&idev->lock);
+			in6_ifa_hold(ifp);
+			ipv6_del_addr(ifp);
+			write_lock_bh(&idev->lock);
+
+			net_info_ratelimited("%s: Failed to add prefix route for address %pI6c; dropping\n",
+					     idev->dev->name, &ifp->addr);
+		}
+	}
+
+	write_unlock_bh(&idev->lock);
+}
+// end
+
 static int addrconf_notify(struct notifier_block *this, unsigned long event,
 			   void *ptr)
 {
@@ -3199,6 +3265,7 @@ static int addrconf_notify(struct notifier_block *this, unsigned long event,
 	int run_pending = 0;
 	int err;
 
+
 	switch (event) {
 	case NETDEV_REGISTER:
 		if (!idev && dev->mtu >= IPV6_MIN_MTU) {
@@ -3243,10 +3310,13 @@ static int addrconf_notify(struct notifier_block *this, unsigned long event,
 			break;
 
 		if (event == NETDEV_UP) {
-			if (!addrconf_qdisc_ok(dev)) {
+			/* restore routes for permanent addresses */
+			addrconf_permanent_addr(dev);
+
+			if (!addrconf_link_ready(dev)) {
 				/* device is not ready yet. */
 				pr_info("ADDRCONF(NETDEV_UP): %s: link is not ready\n",
-					dev->name);
+                                       dev->name);
 				break;
 			}
 
@@ -3258,12 +3328,12 @@ static int addrconf_notify(struct notifier_block *this, unsigned long event,
 				run_pending = 1;
 			}
 		} else if (event == NETDEV_CHANGE) {
-			if (!addrconf_qdisc_ok(dev)) {
+			if (!addrconf_link_ready(dev)) {
 				/* device is still not ready. */
 				break;
 			}
 
-			if (idev) {
+			if (!IS_ERR_OR_NULL(idev)) {
 				if (idev->if_flags & IF_READY) {
 					/* device is already configured -
 					 * but resend MLD reports, we might
@@ -3271,11 +3341,19 @@ static int addrconf_notify(struct notifier_block *this, unsigned long event,
 					 * multicast snooping switches
 					 */
 					ipv6_mc_up(idev);
+
+					// mark@wdl, copy from linux-4.20.15 for CE LOGO test wan_rfc4862.
+					// sometimes the linklocal addr geneated without DAD, restart DAD work to fix it.
+					pr_info("ADDRCONF(NETDEV_CHANGE): %s: but flags ready, restart dad work\n", 
+					            dev->name);
+
+					addrconf_dad_run(idev, true);
+                    
 					break;
 				}
 				idev->if_flags |= IF_READY;
 			}
-
+            
 			pr_info("ADDRCONF(NETDEV_CHANGE): %s: link becomes ready\n",
 				dev->name);
 
@@ -3303,8 +3381,8 @@ static int addrconf_notify(struct notifier_block *this, unsigned long event,
 		}
 
 		if (!IS_ERR_OR_NULL(idev)) {
-			if (run_pending)
-				addrconf_dad_run(idev);
+			if (run_pending) 
+				addrconf_dad_run(idev, false);
 
 			/*
 			 * If the MTU changed during the interface down,
@@ -3551,17 +3629,23 @@ put:
 /*
  *	Duplicate Address Detection
  */
-static void addrconf_dad_kick(struct inet6_ifaddr *ifp)
+static void addrconf_dad_kick(struct inet6_ifaddr *ifp, unsigned long delay)
 {
 	unsigned long rand_num;
 	struct inet6_dev *idev = ifp->idev;
 
-	if (ifp->flags & IFA_F_OPTIMISTIC)
-		rand_num = 0;
+	if (0 == delay)
+	{
+		if (ifp->flags & IFA_F_OPTIMISTIC)
+			rand_num = 0;
+		else
+			rand_num = prandom_u32() % (idev->cnf.rtr_solicit_delay ? : 1);
+	}
 	else
-		rand_num = prandom_u32() % (idev->cnf.rtr_solicit_delay ? : 1);
-
+		rand_num = delay;
+    
 	ifp->dad_probes = idev->cnf.dad_transmits;
+
 	addrconf_mod_dad_work(ifp, rand_num);
 }
 
@@ -3619,7 +3703,7 @@ static void addrconf_dad_begin(struct inet6_ifaddr *ifp)
 		}
 	}
 
-	addrconf_dad_kick(ifp);
+	addrconf_dad_kick(ifp, 0);
 out:
 	spin_unlock(&ifp->lock);
 	read_unlock_bh(&idev->lock);
@@ -3656,6 +3740,7 @@ static void addrconf_dad_work(struct work_struct *w)
 		DAD_ABORT,
 	} action = DAD_PROCESS;
 
+
 	rtnl_lock();
 
 	spin_lock_bh(&ifp->lock);
@@ -3677,15 +3762,16 @@ static void addrconf_dad_work(struct work_struct *w)
 		goto out;
 	}
 
-	if (!ifp->dad_probes && addrconf_dad_end(ifp))
+	if (!ifp->dad_probes && addrconf_dad_end(ifp)) {
 		goto out;
+	}
 
 	write_lock_bh(&idev->lock);
 	if (idev->dead || !(idev->if_flags & IF_READY)) {
 		write_unlock_bh(&idev->lock);
 		goto out;
 	}
-
+    
 	spin_lock(&ifp->lock);
 	if (ifp->state == INET6_IFADDR_STATE_DEAD) {
 		spin_unlock(&ifp->lock);
@@ -3700,10 +3786,8 @@ static void addrconf_dad_work(struct work_struct *w)
 
 		ifp->flags &= ~(IFA_F_TENTATIVE|IFA_F_OPTIMISTIC|IFA_F_DADFAILED);
 		spin_unlock(&ifp->lock);
-		write_unlock_bh(&idev->lock);
-
+		write_unlock_bh(&idev->lock); 
 		addrconf_dad_completed(ifp);
-
 		goto out;
 	}
 
@@ -3715,6 +3799,9 @@ static void addrconf_dad_work(struct work_struct *w)
 
 	/* send a neighbour solicitation for our addr */
 	addrconf_addr_solict_mult(&ifp->addr, &mcaddr);
+
+	pr_info("addrconf_dad_work: send ns, %s: addr=%pI6c\n", idev->dev->name, &ifp->addr);
+    
 	ndisc_send_ns(ifp->idev->dev, &ifp->addr, &mcaddr, &in6addr_any);
 out:
 	in6_ifa_put(ifp);
@@ -3793,16 +3880,32 @@ static void addrconf_dad_completed(struct inet6_ifaddr *ifp)
 	}
 }
 
-static void addrconf_dad_run(struct inet6_dev *idev)
+static void addrconf_dad_run(struct inet6_dev *idev, bool restart)
 {
 	struct inet6_ifaddr *ifp;
-
+	unsigned long delay = 0;
+
+	// mark@wdl, CE LOGO test wan_rfc4862, RA global addr DAD timeout issue.(case 33)
+	// 1. Router linklocal addr DAD NS sent out.
+	// 2. TN send RA with global prefix info, and then waiting 5 seconds.
+	// 3. When router received RA and global addr generated, send DAD NS. 
+	// But sometimes the DAD NS delayed 5.1-5.2 seconds cause TN timeout. (capture packets)
+	// In addrconf_dad_work the rtnl_loca() was blocked cause this delay. (mt_wifi.ko occupied lock)
+	// And this function was called when linklocal addr generated(NETDEV_UP/NETDEV_CHANGE).
+	// Delay sending linklocal addr DAD NS to bypass this issue.
+	if (idev && idev->dev 
+		&& 0 == strcmp(idev->dev->name, "eth1")) {
+		delay = 5000; // ms
+	}
+    
 	read_lock_bh(&idev->lock);
 	list_for_each_entry(ifp, &idev->addr_list, if_list) {
 		spin_lock(&ifp->lock);
 		if (ifp->flags & IFA_F_TENTATIVE &&
 		    ifp->state == INET6_IFADDR_STATE_DAD)
-			addrconf_dad_kick(ifp);
+		    if (restart)
+				ifp->state = INET6_IFADDR_STATE_PREDAD;
+			addrconf_dad_kick(ifp, delay);
 		spin_unlock(&ifp->lock);
 	}
 	read_unlock_bh(&idev->lock);
diff --git a/net/ipv6/icmp.c b/net/ipv6/icmp.c
index 0291548..f948dd9 100644
--- a/net/ipv6/icmp.c
+++ b/net/ipv6/icmp.c
@@ -92,7 +92,7 @@ static void icmpv6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 	struct net *net = dev_net(skb->dev);
 
 	if (type == ICMPV6_PKT_TOOBIG)
-		ip6_update_pmtu(skb, net, info, 0, 0, sock_net_uid(net, NULL));
+		ip6_update_pmtu(skb, net, info, skb->dev->ifindex, 0, sock_net_uid(net, NULL));
 	else if (type == NDISC_REDIRECT)
 		ip6_redirect(skb, net, skb->dev->ifindex, 0,
 			     sock_net_uid(net, NULL));
@@ -617,12 +617,16 @@ static void icmpv6_echo_reply(struct sk_buff *skb)
         rcu_read_unlock_bh();
 
         // ndisc_recv_na -> neigh_update
-        // n->nud_state=02 n->flags=00 dev=eth1
+        // 1. wan_rfc2460_rfc4861_rfc4443, case 13-20: (no reply)
+        // nud_state=02 flags=00 dev=eth1 target=fe80::200:ff:fe00:a0a0
+        // 2. wan_rfc1981, case 5: (host without gw, send reply)
+        // nud_state=02 flags=00 dev=eth1 target=::
         if (n && n->dev && 0 == strcmp(n->dev->name, "eth1")
-                && n->nud_state == NUD_REACHABLE && n->flags != NTF_ROUTER)
+                && n->nud_state == NUD_REACHABLE && n->flags != NTF_ROUTER
+                && !ipv6_addr_any(&rt->rt6i_gateway))
         {
-            printk("icmpv6_echo_reply: nud_state=%02x flags=%02x dev=%s\n", 
-                        n->nud_state, n->flags, n->dev->name);
+            printk("icmpv6_echo_reply: nud_state=%02x flags=%02x dev=%s target=%pI6c\n", 
+                        n->nud_state, n->flags, n->dev->name, &rt->rt6i_gateway);
 
             goto out;
         }
diff --git a/net/ipv6/ndisc.c b/net/ipv6/ndisc.c
index f778b0b..0e8a5ea 100644
--- a/net/ipv6/ndisc.c
+++ b/net/ipv6/ndisc.c
@@ -490,6 +490,7 @@ void ndisc_send_na(struct net_device *dev, const struct in6_addr *daddr,
 	struct nd_msg *msg;
 	int optlen = 0;
 
+    
 	/* for anycast or proxy, solicited_addr != src_addr */
 	ifp = ipv6_get_ifaddr(dev_net(dev), solicited_addr, dev, 1);
 	if (ifp) {
@@ -530,7 +531,6 @@ void ndisc_send_na(struct net_device *dev, const struct in6_addr *daddr,
 		ndisc_fill_addr_option(skb, ND_OPT_TARGET_LL_ADDR,
 				       dev->dev_addr);
 
-
 	ndisc_send_skb(skb, daddr, src_addr);
 }
 
@@ -567,6 +567,7 @@ void ndisc_send_ns(struct net_device *dev, const struct in6_addr *solicit,
 	if (!saddr) {
 		if (ipv6_get_lladdr(dev, &addr_buf,
 				   (IFA_F_TENTATIVE|IFA_F_OPTIMISTIC)))
+			printk("ndisc_send_ns: get lladdr failed, %s: addr=%pI6c\n", dev->name, solicit);
 			return;
 		saddr = &addr_buf;
 	}
@@ -577,9 +578,10 @@ void ndisc_send_ns(struct net_device *dev, const struct in6_addr *solicit,
 		optlen += ndisc_opt_addr_space(dev);
 
 	skb = ndisc_alloc_skb(dev, sizeof(*msg) + optlen);
-	if (!skb)
+	if (!skb) {
+		printk("ndisc_send_ns: alloc skb failed, %s: addr=%pI6c\n", dev->name, solicit);
 		return;
-
+    }
 	msg = (struct nd_msg *)skb_put(skb, sizeof(*msg));
 	*msg = (struct nd_msg) {
 		.icmph = {
@@ -791,6 +793,7 @@ have_ifp:
 
 		idev = ifp->idev;
 	} else {
+
 		struct net *net = dev_net(dev);
 
 		/* perhaps an address on the master device */
-- 
2.7.4

