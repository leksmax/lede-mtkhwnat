diff --git a/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c b/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c
index 948f2d8191ed..f170eb3abf41 100644
--- a/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c
@@ -726,17 +726,6 @@ static unsigned int
 mtk_hnat_br_nf_pre_routing(void *priv, struct sk_buff *skb,
 			   const struct nf_hook_state *state)
 {
-#if defined(CONFIG_NET_MEDIATEK_HW_QOS)
-	struct vlan_ethhdr *veth;
-
-	veth = (struct vlan_ethhdr *)skb_mac_header(skb);
-
-	if (eth_hdr(skb)->h_proto == HQOS_MAGIC_TAG) {
-		skb_hnat_entry(skb) = ntohs(veth->h_vlan_TCI) & 0x3fff;
-		skb_hnat_reason(skb) = HIT_BIND_FORCE_TO_CPU;
-	}
-#endif
-
 	if (!HAS_HQOS_MAGIC_TAG(skb) && !is_ppe_support_type(skb)) {
 		hnat_set_head_frags(state, skb, 1, hnat_set_alg);
 		return NF_ACCEPT;
@@ -1699,6 +1688,38 @@ mtk_hnat_ipv4_nf_post_routing(void *priv, struct sk_buff *skb,
 	return NF_DROP;
 }
 
+#if defined(CONFIG_NET_MEDIATEK_HW_QOS)
+static unsigned int
+mtk_hqos_handler(void *priv, struct sk_buff *skb,
+		 const struct nf_hook_state *state)
+{
+	struct vlan_ethhdr *veth = (struct vlan_ethhdr *)skb_mac_header(skb);
+
+	if (eth_hdr(skb)->h_proto == HQOS_MAGIC_TAG) {
+		skb_hnat_entry(skb) = ntohs(veth->h_vlan_TCI) & 0x3fff;
+		skb_hnat_reason(skb) = HIT_BIND_FORCE_TO_CPU;
+	}
+
+	/* packets form ge -> external device */
+	if (do_ge2ext_fast(state->in, skb)) {
+		if (!do_hnat_ge_to_ext(skb, __func__))
+			return NF_STOLEN;
+		goto drop;
+	}
+
+	return NF_ACCEPT;
+drop:
+	printk_ratelimited(KERN_WARNING
+				"%s:drop (in_dev=%s, iif=0x%x, CB2=0x%x, ppe_hash=0x%x, sport=0x%x, reason=0x%x, alg=0x%x)\n",
+				__func__, state->in->name, skb_hnat_iface(skb),
+				HNAT_SKB_CB2(skb)->magic, skb_hnat_entry(skb),
+				skb_hnat_sport(skb), skb_hnat_reason(skb),
+				skb_hnat_alg(skb));
+
+	return NF_DROP;
+}
+#endif
+
 static unsigned int
 mtk_hnat_br_nf_post_routing(void *priv, struct sk_buff *skb,
 			    const struct nf_hook_state *state)
@@ -1749,16 +1770,6 @@ mtk_hnat_ipv4_nf_local_out(void *priv, struct sk_buff *skb,
 	return NF_ACCEPT;
 }
 
-static unsigned int mtk_hnat_br_nf_forward(void *priv,
-					   struct sk_buff *skb,
-					   const struct nf_hook_state *state)
-{
-	if (unlikely(IS_EXT(state->in) && IS_EXT(state->out)))
-		hnat_set_head_frags(state, skb, 1, hnat_set_alg);
-
-	return NF_ACCEPT;
-}
-
 static struct nf_hook_ops mtk_hnat_nf_ops[] __read_mostly = {
 	{
 		.hook = mtk_hnat_ipv4_nf_pre_routing,
@@ -1799,21 +1810,23 @@ static struct nf_hook_ops mtk_hnat_nf_ops[] __read_mostly = {
 	{
 		.hook = mtk_hnat_br_nf_pre_routing,
 		.pf = NFPROTO_BRIDGE,
-		.hooknum = NF_BR_PRE_ROUTING,
+		.hooknum = NF_BR_LOCAL_IN,
 		.priority = NF_BR_PRI_FIRST,
 	},
 	{
-		.hook = mtk_hnat_br_nf_forward,
+		.hook = mtk_hnat_br_nf_post_routing,
 		.pf = NFPROTO_BRIDGE,
-		.hooknum = NF_BR_FORWARD,
+		.hooknum = NF_BR_LOCAL_OUT,
 		.priority = NF_BR_PRI_LAST - 1,
 	},
+#if defined(CONFIG_NET_MEDIATEK_HW_QOS)
 	{
-		.hook = mtk_hnat_br_nf_post_routing,
+		.hook = mtk_hqos_handler,
 		.pf = NFPROTO_BRIDGE,
-		.hooknum = NF_BR_POST_ROUTING,
-		.priority = NF_BR_PRI_LAST - 1,
+		.hooknum = NF_BR_PRE_ROUTING,
+		.priority = NF_BR_PRI_FIRST,
 	},
+#endif
 };
 
 int hnat_register_nf_hooks(void)
